---
type InfoConfig = {
    heading: string,
    lightStyles: string,
    darkStyles: string,
    borderStyles: string,
}

interface Props {
    title: string;
    type: "examples" | "jargon" | "reminder" | "warning";
};
const {title, type} = Astro.props;

/*
   For some bizarre reason, tailwind CSS does not work with string interpolation.
   Unfortunately this means that the styles must be duplicated.
*/
const config: InfoConfig = (() => {
    switch(type) {
        case "examples": return {
            heading: `‚úçÔ∏è Examples:`,
            lightStyles: `from-green-100 via-green-50 via-75%`,
            darkStyles: `dark:from-green-700 dark:via-green-800 dark:via-50% dark:to-green-900`,
            borderStyles: `border-green-900`,
        }
        case "jargon": return {
            heading: `ü™∂ Jargon: ${title}`,
            lightStyles: `from-purple-100 via-purple-50 via-75%`,
            darkStyles: `dark:from-purple-700 dark:via-purple-800 dark:via-50% dark:to-purple-900`,
            borderStyles: `border-purple-900`,
        }
        case "reminder": return {
            heading: `üîî Reminder: ${title}`,
            lightStyles: `from-blue-100 via-blue-50 via-75%`,
            darkStyles: `dark:from-blue-700 dark:via-blue-800 dark:via-50% dark:to-blue-900`,
            borderStyles: `border-blue-900`,
        }
        case "warning": return {
            heading: `üöß Warning: ${title}`,
            lightStyles: `from-amber-100 via-amber-50 via-75%`,
            // Again, no string interpolation, so non-tailwind colours are literals.
            darkStyles: `dark:text-black dark:from-[#bfab0b] dark:to-[#8c7d08]`,
            borderStyles: `border-[#8c7d08]`,
        }
    }
})();
---

{/*
   This is a <div> and not a more semantically meaningful element like <aside>
   because Info cannot be separated from the content. 
   Jargon must be explained. Vocabulary must be introduced.
*/}
<div class={`info ${[config.lightStyles, config.darkStyles, config.borderStyles].join(" ")}`}>
    <p class="heading"><strong>{config.heading}</strong></p>
    <slot />
</div>

<style is:global>
    @tailwind components;
    @layer components {
        .info {
            @apply my-8 p-4;
            /* From, via, and to are configured, fade to transparent automatically. */
            @apply bg-gradient-to-b;
            @apply border-solid border-x-2 border-t-4 border-b-0 rounded-t-2xl;
        }
        .info p.heading  {
            @apply mb-6;
        }
        /* 
          .block has been extracted so that the last paragraph of this <div> 
          has no margin-bottom. 
        */
        .info p, .info strong {
            @apply bg-transparent;
        }
    }
</style>
